--- original/BaseGrid.h	2013-08-11 14:50:13.000000000 -0400
+++ BaseGrid.h	2016-04-04 11:45:17.257377358 -0400
@@ -67,8 +67,8 @@
 	Point<GPType> point;
 	boost::shared_ptr<T> ptr;
 
-	GridPointHolder() :
-		inGrid(false), point(0) {
+	GridPointHolder(const size_t & size) :
+		inGrid(false), point(size,  std::numeric_limits< GPType >::quiet_NaN()) {
 	}
 };
 
@@ -115,7 +115,7 @@
 
 	CellAccessor cellAccessor;
 
-	bool doMove(std::vector<GPType>& point, GridPointHolder<T, GPType>* gpHolder);
+	bool doMove(const std::vector<GPType>& point, GridPointHolder<T, GPType>* gpHolder);
 
 	size_t size_;
 
@@ -371,7 +371,7 @@
 }
 
 template<typename T, typename CellAccessor, typename GPTransformer, typename Adder, typename GPType>
-bool BaseGrid<T, CellAccessor, GPTransformer, Adder, GPType>::doMove(std::vector<GPType>& location, GridPointHolder<T,
+bool BaseGrid<T, CellAccessor, GPTransformer, Adder, GPType>::doMove(const std::vector<GPType>& location, GridPointHolder<T,
 		GPType>* gpHolder) {
 	Point<GPType> pt(location);
 	if (cellAccessor.put(gpHolder->ptr, pt)) {
@@ -431,10 +431,19 @@
 template<typename T, typename CellAccessor, typename GPTransformer, typename Adder, typename GPType>
 bool BaseGrid<T, CellAccessor, GPTransformer, Adder, GPType>::addAgent(boost::shared_ptr<T> agent) {
   if(!Projection<T>::agentCanBeAdded(agent)) return false;
-  GridPointHolder<T, GPType>* gp = new GridPointHolder<T, GPType> ();
+
+  GridPointHolder<T, GPType>* gp = new GridPointHolder<T, GPType> (size_);
   gp->ptr = agent;
-  agentToLocation[agent->getId()] = gp;
-  return adder.add(agent);
+
+  AgentId Id = agent->getId();
+  agentToLocation[Id] = gp;
+
+  std::pair<LocationMapIter, bool> Insert = agentToLocation.insert(std::make_pair(Id, gp));
+
+  if (Insert.first == agentToLocation.end())
+    throw Repast_Error_2<AgentId>(Id, Projection<T>::name()); // Agent has not yet been introduced to this space/is not present
+
+  return doMove(gp->point.coords(), Insert.first->second);
 }
 
 template<typename T, typename CellAccessor, typename GPTransformer, typename Adder, typename GPType>
